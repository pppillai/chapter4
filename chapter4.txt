Built in types

Value types: integer, float, ranges, regular expression, atoms
System types: pids, ports, references
Collection types: Tuples, List, Maps, Binaries


Integers : any size values, may contain underscores as separators, decimal, hexadecimal, octal and binary.

Floats : decimal values, before and after dot number is required. exponential e can be provided. 1.0323e-5, 1.234e5

atoms: constant that represents somethings name. :fred :binary? :var@2, :<> :=== :"hello world"

Ranges : start .. end

Regular Expressions :
    ~r{}, ~r{}opts


System types
PID, Port, make_ref
self

Collection types
Tuples :
{status, count, action} = {:ok, 234, "next"}


List 
++, --, in

[H|T]
List is either empty List Or Head and Tail as a list itself

Keyword List
[name: pradeep, last: pillai, city: banglore]
[{:name, pradeep}, {:last, pillai}, {:city, banglore}]

Maps
%{key => value, key => value}
keyword Maps
%{key: value, key: value}

in keyword list keys can be repeated


accessing map with []
'' and "" are different

Binaries
<<>>
<<1, 2>>


Dates and Times



Interactive Elixir (1.9.1) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> Regex.run(~r{[aeiou]}, "caterpillar")
["a"]
iex(2)> Regex.scan ~r{[aeiou]}, "caterpillar" 
[["a"], ["e"], ["i"], ["a"]]
iex(3)> Regex.split ~r{[aeiou]}, "caterpillar"
["c", "t", "rp", "ll", "r"]
iex(4)> Regex.replace ~r{[aeiou]}, "caterpillar", "*"
"c*t*rp*ll*r"
iex(5)> Regex.replace ~r{[.]}, "mu password", "*"
"mu password"
iex(6)> Regex.replace ~r{[]}, "mu password", "*" 
** (Regex.CompileError) missing terminating ] for character class at position 2
    (elixir) lib/regex.ex:209: Regex.compile!/2
    (elixir) expanding macro: Kernel.sigil_r/2
    iex:6: (file)
iex(6)> Regex.replace ~r{[*]}, "mu password", "*"
"mu password"
iex(7)> Regex.replace ~r{[a-z]}, "mu password", "*"
"** ********"
iex(8)> Regex.replace ~r{[a-z s]}, "mu password", "*"
"***********"
iex(9)> Regex.replace ~r{[a-z s]}, "mu passwo234rd", "*"
"*********234**"
iex(10)> Regex.replace ~r{[a-z s 0-9]}, "mu passwo234rd", "*"
"**************"
iex(11)> self
#PID<0.104.0>
iex(12)> self()
#PID<0.104.0>
iex(13)> make_ref
#Reference<0.2148899162.3020161030.104787>
iex(14)> a = make_ref
#Reference<0.2148899162.3020161030.104803>
iex(15)> a
#Reference<0.2148899162.3020161030.104803>
iex(16)> pwd
/Users/ppillai/jumio/study/elixir/chapter4
iex(17)> ls
.git             chapter4.txt     
iex(18)> {status, file} = File.open("chapter4.txt")
{:ok, #PID<0.124.0>}
iex(19)> status
:ok
iex(20)> file
#PID<0.124.0>
iex(21)> {:ok, file} = File.open("hey.txt")
** (MatchError) no match of right hand side value: {:error, :enoent}
    (stdlib) erl_eval.erl:453: :erl_eval.expr/5
    (iex) lib/iex/evaluator.ex:257: IEx.Evaluator.handle_eval/5
    (iex) lib/iex/evaluator.ex:237: IEx.Evaluator.do_eval/3
    (iex) lib/iex/evaluator.ex:215: IEx.Evaluator.eval/3
    (iex) lib/iex/evaluator.ex:103: IEx.Evaluator.loop/1
    (iex) lib/iex/evaluator.ex:27: IEx.Evaluator.init/4
iex(21)> {:error, file} = File.open("mon")
{:error, :enoent}
iex(22)> file
:enoent
iex(23)> [132,123] + [234,123]
** (ArithmeticError) bad argument in arithmetic expression: [132, 123] + [234, 123]
    :erlang.+([132, 123], [234, 123])
iex(23)> [132,123] ++ [234,123]
[132, 123, 234, 123]
iex(24)> [1,2,3] -- [2]
[1, 3]
iex(25)> 1 in [1,2]
true
iex(26)> 0 in [1,2]
false
iex(27)> [1, fred: 2, dave: 3]
[1, {:fred, 2}, {:dave, 3}]
iex(28)> {1, fred: 2, dave: 3}
{1, [fred: 2, dave: 3]}
iex(29)> states = %{"GUJ" => "Gujarat"}
%{"GUJ" => "Gujarat"}
iex(30)> states
%{"GUJ" => "Gujarat"}
iex(31)> states.GUJ
** (CompileError) iex:31: invalid alias: "states.GUJ". If you wanted to define an alias, an alias must expand to an atom at compile time but it did not, you may use Module.concat/2 to build it at runtime. If instead you wanted to invoke a function or access a field, wrap the function or field name in double quotes

iex(31)> states['GUJ']
nil
iex(32)> states["GUJ"]
"Gujarat"
iex(33)> states['GUJ']
nil
iex(34)> %{key => value}
** (CompileError) iex:34: undefined function key/0
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
iex(34)> %{:key => "value", "key" => 1}
%{:key => "value", "key" => 1}
iex(35)> %{:key => "value", :key => 1} 
warning: key :key will be overridden in map
  iex:35

%{key: 1}
iex(36)> #{key: "value", key: "Hello"}
nil
iex(37)> %{key: "value", key: "Hello"}
warning: key :key will be overridden in map
  iex:37

%{key: "Hello"}
iex(38)> %{key => "value", key => "Hello"}
** (CompileError) iex:38: undefined function key/0
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
    (stdlib) lists.erl:1354: :lists.mapfoldl/3
iex(38)> %{:key => "value", :key => "Hello"}
warning: key :key will be overridden in map
  iex:38

%{key: "Hello"}
iex(39)> %{:key => "value", key: "Hello"}   
warning: key :key will be overridden in map
  iex:39

%{key: "Hello"}
iex(40)> %{key:"value", key: "Hello"}    
** (SyntaxError) iex:40: keyword argument must be followed by space after: key:

iex(40)> %{key: "value", key: "Hello"}
warning: key :key will be overridden in map
  iex:40

%{key: "Hello"}
iex(41)> <<1, 2>>
<<1, 2>>
iex(42)> bin = <<1,2>>
<<1, 2>>
iex(43)> byte_size bin
2
iex(44)> bin = <<3 :: size(2), 5 :: size(4), 1 :: size(2)>>
<<213>>
iex(45)> :io.format("~8.2b~n", :binary.bin_to_list(bin))
11010101
:ok
iex(46)> d1= Date.new 2019, 09, 16
{:ok, ~D[2019-09-16]}
iex(47)> inspect d1
"{:ok, ~D[2019-09-16]}"
iex(48)> inspect d1, struct: false
"{:ok, ~D[2019-09-16]}"
iex(49)> inspect d1, structs: false
"{:ok, %{__struct__: Date, calendar: Calendar.ISO, day: 16, month: 9, year: 2019}}"
iex(50)> 

